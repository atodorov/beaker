<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<chapter id="Installation">
<title>Installation</title>
<para>
		The installation guide will teach you how to install Beaker into your system.
		</para>
		<section id="Installation-Install_Beaker">
		<title>Install Beaker</title>
		<para>Add the beaker.repo file that Red Hat provided for you on the machine(s) that will be running your Scheduler and Lab Controller. The following should be done as root.</para>
		<section id="Installation-Install_Beaker-Disabling_Repos">
		  <title>Disabling Repos</title>
      <para>Disable other repos to ensure that packages are installed from the beaker repo. 
      </para>
      <para>Install the dependencies 
		  <screen>$ yum -y install rpm-build python-devel TurboGears python-TurboMail
$ yum -y install mod_wsgi python-decorator python-tgexpandingformwidget python-xmltramp		  
		  </screen>
		</para>
		<para>Install Beaker server.
		<screen>$ yum install beaker-server
		  </screen>
			</para>
    </section>
    <section id="Installation-Install_Beaker-Install_DB">
    <title>Install DB</title>
    <para>
    Beaker supports MySQL,MSSQL,Oracle,MaxDB,PostgreSQL, and SQLite. For this tutorial,we will use MySQL. First, make sure MySQL server is installed, and configure the daemon to run at startup. 
      <screen>$ yum install -y mysql-server MySQL-python
$ chkconfig mysqld on
$ service mysqld start
      </screen>
    </para>
    <para>
    Create a database, and grant access to beaker user. You can put the database on the local machine, or on a remote machine. In the example below, the database is hosted on the local machine.
    <screen>
    $ echo "create database beaker;" | mysql
    $ echo "grant all on beaker.* to 'beaker'@'localhost' IDENTIFIED BY 'beaker';"| mysql
    </screen>
    </para>
    <para>
    Now let's initialise our DB with tables. We'll also create an admin account called <emphasis>admin</emphasis> with password <emphasis>testing</emphasis>. 
    </para>
    <formalpara>
      <title>Table type</title>
        <para>Beaker requires a transactional DB. If using a Database that default to something else (i.e MySQL defaults to MyISAM), either the default table type for the database needs to be changed (to InnoDB in MySQL's case) or the user will have to convert the tables to a transactional DB after running beaker-init. </para>
    </formalpara>
     <para>You can change the default storage engine for mysql by editing the file /etc/my.cnf and adding the following line in the [mysqld] section.
      <screen>
      default-storage-engine=INNODB
      $ beaker-init -u admin -p testing -e admin_email_address
      </screen>
    </para>
  </section>
  <section id="Installation-Install_Beaker-Start_Beaker">
    <title>Start Beaker</title>
    <para>We are now ready to start the Beaker service. Make sure you have the following line in your /etc/httpd/conf.d/wsgi.conf and that it is uncommented. 
    <screen>
       LoadModule wsgi_module modules/mod_wsgi.so
</screen>
    </para>
    <para>First make sure apache is on and configured to run on startup. 
      <screen>
      $ sudo chkconfig httpd on
      $ sudo /sbin/service/httpd start
      </screen>
    </para>
    <para>We need to switch SELinux off. 
      <screen>
      $ setenforce 0
      </screen>
       </para>
       <para>
       Due to permission issues, we need to delete the log file before we start Beaker for the first time. Otherwise Beaker will not run properly. 
       <screen>
       $ sudo rm /var/log/beaker/server*.log
       </screen>
       </para>
       <para>
       Start Beaker and configure it to run on startup. 
       <screen>
       $ sudo chkconfig beakerd on
       $ sudo /sbin/service beakerd start
       </screen>
       </para>
       <para>
       To make sure Beaker is running go to <ulink url="http://BeakerServer.example.com/bkr/ in your browser"></ulink>
       </para>
       <formalpara>
       <title>Add Lab Controller details</title>
       <para>
       One more step that we need to do is add the Lab Controller that we are yet to configure<xref linkend="Installation-Setup_Lab_Controller"></xref>. Login in at<ulink url="http://BeakerServer.example.com/bkr/labcontrollers/new"></ulink> . Use the username and password above from the beaker-init command. The new lab controller form requires 3 fields 
        <itemizedlist>
          <listitem>
            <para>
              <application>FQDN</application>: This is the fully qualified domain name of the lab controller. 
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Username</application>: This is the login name we will use for xmlrpc, for the purposes of this document will use the login name <emphasis>testing</emphasis> 
            </para>
          </listitem>
          <listitem>
            <para>
              <application>Password</application>: This is the password that goes along with the username, again we will use : <emphasis>testing</emphasis>
            </para>
          </listitem>
        </itemizedlist>
       </para>
       </formalpara>
       <para>
       The new lab controller also needs a user account. Login at:
        <screen>
        http://BeakerServer.example.com/bkr/users/new
        </screen>
        <itemizedlist>
          <listitem>
            <para><application>Login</application>: Should be the host/FQDN (FQDN is the fully qualified domain of the lab controller). 
           </para>
          </listitem>
           <listitem>
            <para><application>Display Name</application>: Should be just FQDN. 
           </para>
          </listitem>
           <listitem>
            <para><application>Email adrress</application>: The email address should be root@FQDN. 
           </para>
          </listitem>
           <listitem>
            <para><application>Password</application>: If you are not using Kerberos authentication, you will need a password here. 
           </para>
          </listitem>
        </itemizedlist>
       </para>
       <para>Save the form and we are done with the Inventory side for now. 
       </para>
  </section>
  </section>
  <section id="Installation-Setup_Lab_Controller">
  <title>Setup Lab Controller</title>
  <para>Beaker uses Lab Controllers to manage the Systems in it's inventory.Open a terminal window on the system you will be running the Lab Controller on. This can be a seperate system than the one running the Beaker server. 
  </para>
  <section id="Installation-Setup_Lab_Controller-Install_Lab_Controller">
  <title>Install Lab Controller
  </title>
  <para>If you have not installed the beaker repo on the Lab Controller, see <xref linkend="Installation-Install_Beaker"></xref>. Follow the instruction to install Beaker repo. Install the Lab Controller rpm. These dependencies are needed to make the rpm. 
    <screen>
       $ sudo yum -y install rpm-build python-devel TurboGears
    </screen>
  </para>
  <para>To install the Lab Controller, enter the following. 
    <screen>
       $ sudo yum install beaker-lab-controller
    </screen>
  </para>
  </section>
  <section id="Installation-Setup_Lab_Controller-Configure_Lab_Controller">
  <title>Configure Lab Controller</title>
  <para>Cobbler is one of the dependencies that is installed with the Lab Controller. You'll need to edit the <emphasis>/etc/cobbler/settings</emphasis> file. 
    <itemizedlist>
     <listitem>
      <para><application>server</application>: This needs to be set to the Lab Controllers Fully qualified domain name. 
      </para>
      </listitem>
      <listitem>
      <para><application>next_server</application>:  If you use cobbler as your dhcp server this needs to be the ip address of the Lab Controller. 
      </para>
      </listitem>
      <listitem>
      <para><application>pxe_just_once</application>: 1
      </para>
      </listitem>
      <listitem>
      <para><application>anamon_enabled</application>: 1
      </para>
      </listitem>
      <listitem>
      <para><application>redhat_management_server</application>: <ulink url="https://login:password@BeakerServer.example.com/"></ulink>bkr. login would be <emphasis>admin</emphasis>, password would be <emphasis>testing</emphasis>, and BeakerServer would be the <emphasis>HOSTNAME</emphasis> of the Beaker/Server you installed earlier. If your Lab Controller is on the same machine as your Beaker server, the values should be <ulink url="https://login:password@BeakerServer/bkr "></ulink>
      </para>
      </listitem>
    </itemizedlist>
  </para>
  <para>You will need to enable an auth method in /etc/cobbler/modules.conf 
  <itemizedlist>
    <listitem>
      <para>Change module = auth_denyall to module = authn_testing 
      </para>
    </listitem>
     <listitem>
      <para>authn_testing gives a login of testing password testing 
      </para>
    </listitem>
     <listitem>
      <para>If you create proper accounts, make sure they match what you entered in <ulink url="http://BeakerServer/labcontrollers/new"></ulink>
      </para>
    </listitem>
  </itemizedlist>
  </para>
  <para>If you are using SELinux, do the following. 
    <screen>
    $ sudo setsebool -P httpd_can_network_connect true
    $ sudo semanage fcontext -a -t public_content_t "/var/lib/tftpboot/.*"
    $ sudo semanage fcontext -a -t public_content_t "/var/www/cobbler/images/.*"
    </screen>
  </para>
  <para>Turn on http 
    <screen>
    $ sudo chkconfig httpd on
    $ sudo service httpd start
    </screen>
  </para>
  <para>Turn on tftp 
    <screen>
    $ sudo chkconfig xinetd on
    $ sudo chkconfig tftp on
    $ sudo service xinetd start
    </screen>
  </para>
  <para>Turn on cobbler 
    <screen>
    $ sudo chkconfig cobblerd on
    $ sudo service cobblerd start
    </screen>
  </para>
  <para>Enable and turn on beaker watchdog proxy
    <screen>
    $ sudo chkconfig beaker-watchdog on
    $ sudo chkconfig beaker-proxy on
    $ sudo service beaker-watchdog start
    $ sudo service beaker-proxy start
    </screen>
  </para>
  <para>Cobbler should now be running. 
  </para>
  <para>You'll need to import some distros. You can use the following command (whilst replacing the variables). 
  <screen>$ cobbler import --path=/net/${NFSSERVER}/${NFSPATH} \ --name=$DISTRONAME \ --available-as=nfs://${NFSSERVER}:/${NFSPATH}</screen>
  </para>
  <para>Beaker/Server needs a little more info than cobbler normally stores about a distro in order to use it. Thats why beaker-lab-controller provides a script in /var/lib/cobbler/triggers/sync/post/osversion.trigger which needs to be run after you import a new distro. It looks up the distros full family.update and looks for any yum repos that may be in the distro path. It also adds the cobbler distros into the Beaker server. 
  <screen>
  $ /var/lib/cobbler/triggers/sync/post/osversion.trigger
  </screen>
  </para>
  <para>Check that the Disto was added succesfully by going to <ulink url="https://BeakerServer.example.com/bkr/distros"></ulink>.You'll need to configure the /etc/beaker/proxy.conf file with the following settings. 
  <screen>
  # Hub xml-rpc address.
  HUB_URL = "https://BeakerServer.example.com/bkr"
  #HUB_URL = "http://localhost:8080"
  
  # Hub authentication method. Example: krbv, password, worker_key
  AUTH_METHOD = "password"
  #AUTH_METHOD = "krbv"
  
  # Username and password
  USERNAME = "host/lab.example.com"  # This needs to match the account your created on the Beaker Scheduler
  PASSWORD = "testing"  # Again, only if you are not using kerberos does this need to be set.
  
  # Kerberos service prefix. Example: host, HTTP
  KRB_SERVICE = "HTTP"
  
  # Kerberos realm. If commented, last two parts of domain name are used. Example: MYDOMAIN.COM.
  KRB_REALM = "EXAMPLE.COM"
  </screen>
  </para>
  </section>  
  </section>
  <section id="Installation-Beaker_Client">
    <title>Beaker Client</title>
       <para>
        You'll then need to configure how your Beaker client authenticates with the Beaker server. You can use either password authentication, or kerberos authentication. For password add the following: 
        <screen>
          AUTH_METHOD = "password"
          USERNAME = "username"
          PASSWORD = "password"
        </screen>
      </para>
      <para>
       If instead kerberos authentication is preferred: 
        <screen>
          AUTH_METHOD = "krbv"
          KRB_REALM = "krb_realm"
        </screen>
      </para>
      <para>
        To verify it is working properly: 
        <screen>
          $ bkr list-labcontrollers
        </screen>
      </para>
      <para>
         It should return a list of labcontrollers configured in Beaker. 
      </para>
      <para>
        To create a simple Job workflow, the beaker client comes with the command<command>bkr workflow-simple</command> . This simple Job workflow will create the XML for you from various options passed in a the shell prompt, and submit this to the Beaker server. To see all the options that can be passed to the   <command> workflow-simple,</command> use the following command: 
        <screen>
          $ bkr workflow-simple --help
        </screen>
      </para>
      <para>
        A common set of paramaters that may be passed to the workflow-simple options would be the following:
       <screen>
         $ bkr workflow-simple --username=&lt;user&gt; --password=&lt;passwd&gt; --dryrun
              --arch=&lt;arch&gt; --distro=&lt;distro_name&gt; --task=&lt;task_name&gt;
              --type=&lt;TYPE&gt; --whiteboard=&lt;whiteboard_name&gt; --debug &gt; my_job.xml
        </screen>
      </para>
    <para>
      To submit an existing Job workflow: 
      <screen>
        bkr job-submit job_xml
      </screen>
    </para>
    <para>
      If succesful, you will be shown the Job ID and the progress of your Job. 
    </para>
    <para>
      To watch a Job: 
      <screen>
        $ bkr job-watch J:job_id
      </screen>
    </para>
    <para>
      To cancel a Job you have created: 
      <screen>
       $ bkr job-cancel J:job_id
      </screen>
    </para>
    <para>
      To show all Tasks available for a given distro: 
      <screen>
       $ bkr task-list distro
      </screen>
    </para>
    <para>
      To add a Task: 
      <screen>
        $ bkr task-add task_rpm
      </screen>
    </para>
  </section>
  </chapter>
  
    
