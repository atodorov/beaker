<?xml version='1.0'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

                    <section id="User_Guide-Getting_Started-Process-Tests-Unassimilated_or_Unfinsihed_Content">
                      <title>Unassimilated or Unfinished content</title>
                      <section id="User_Guide-Getting_Started-Process-Tests-Unassimilated_or_Unfinsihed_Content-Using_the_startup_test_function">
                        <title>Using the startup_test function</title>
                        <para>The startup_test function can be used to provide a primitive smoketest of a program, by setting a shell variable named result. You will need to use report_result if you use it. The syntax is: 
                        </para>
                        <screen>
			startup_test program [arg1] [arg2] [arg3]
                        </screen>
                        <para>The function takes the name of a program, along with up to three arguments. It fakes an X server for the test by ensuring that Xvfb is running (and setting DISPLAY accordingly), then enables core-dumping, and runs the program with the arguments provided, piping standard output and error into OUTPUTFILE (overwriting, not appending). 
                        </para>
                        <para>The function then checks various things: 
                          <itemizedlist>
                            <listitem>
                              <para>any Gtk-CRITICAL warnings found in the resulting OUTPUTFILE cause result to be WARN.
                              </para>
                            </listitem>
                            <listitem>
                              <para>that the program can be found in the PATH, using the which command; if it is not found it causes result to be FAIL, appending the problem to OUTPUTFILE 
                              </para>
                            </listitem>
                            <listitem>
                              <para>for binaries, it uses ldd to detect missing libraries; if any are missing it causes result to be FAIL, appending the problems to OUTPUTFILE 
                              </para>
                            </listitem>
                            <listitem>
                              <para>if any coredumps are detected it causes result to be FAIL 
                              </para>
                            </listitem>
                          </itemizedlist>
                        </para>
                        <para>Finally, it kills the fake X server. You then need to report the result. 
                        </para>
                        <screen>
            #!/bin/sh
             
            # source the test script helpers
            . /usr/bin/beaker-environment.sh
             
            # ---- do the actual testing ----
            result=PASS 1 
            startup_test /usr/bin/evolution
            report_result $TEST $result 2 </screen>
                        <para>Normally it's a bad idea to start with a PASS and try to detect a FAIL, since an unexpected error that prevents further setting of the value will lead to a false PASS rather than a false FAIL. Unfortunately in this case the startup_test function requires it. 
                        </para>
                        <screen>
		report_result $TEST $result 
                        </screen>
                        <para>We report the result, using the special result shell variable set by startup_test 
                        </para>
                      </section>
                    </section>
